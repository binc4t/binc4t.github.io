<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>where dream begins!</title><link>https://binc4t.github.io/</link><description>Recent content on where dream begins!</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 07 Jun 2024 21:59:26 +0800</lastBuildDate><atom:link href="https://binc4t.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>NTP 协议</title><link>https://binc4t.github.io/posts/ntp/</link><pubDate>Fri, 07 Jun 2024 21:59:26 +0800</pubDate><guid>https://binc4t.github.io/posts/ntp/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>Port&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>123 (UDP)&lt;/td>
 &lt;td>NTP (Network Time Protocol).&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="什么是ntp协议">
 什么是NTP协议
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%afntp%e5%8d%8f%e8%ae%ae">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>NTP(Network Time Protocol) 网络时间协议，运行在123端口上， 用于时间同步&lt;/p>
&lt;p>NTP 通过分级的方式来组织所有节点，从0到15，共15级，0级是最准确的时间设备，从0级同步时间的设备是1级设备，依次类推&lt;/p>
&lt;p>网络上的设备是一个既做服务器又做客户端的模型，在从其他设备获取时间后，其他设备同样可以从你这里获取时间&lt;/p>
&lt;p>具体linux设备上，可以启动ntpd，ntpd通过ntp协议来同步时钟&lt;/p>
&lt;h2 id="ntp协议的原理">
 NTP协议的原理
 &lt;a class="heading-link" href="#ntp%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%8e%9f%e7%90%86">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>NTP原理简单理解起来就是，
假设A想从B初同步时间，那么需要向B发起请求，B把自己的时间发给A，但是因为网络延迟的原因，B的消息传达给A要过一个单程延迟，因此A需要知道单程延迟是多少&lt;/p>
&lt;p>从A和B的两次通信中，其实就可以估算出网络延迟&lt;/p>
&lt;p>借用&lt;a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/NTP.html" class="external-link" target="_blank" rel="noopener">此处&lt;/a>的图片来说明&lt;/p>
&lt;p>&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/202406072215855.png" alt="">&lt;/p>
&lt;p>其中&lt;br>
t1 是客户端发送数据时, 客户端的时间
t2 是服务端收到数据时, 服务器的时间
t3 是服务端发送数据时, 服务器的时间
t4 是客户端收到数据时, 客户端的时间&lt;/p>
&lt;p>利用这四个时间就可以估算出延迟offset&lt;br>
&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/202406072215103.png" alt="">&lt;/p>
&lt;p>client就可以用t3 + offset 来校准时间&lt;/p></description></item><item><title>DHCP 协议</title><link>https://binc4t.github.io/posts/dhcp/</link><pubDate>Sat, 01 Jun 2024 23:07:52 +0800</pubDate><guid>https://binc4t.github.io/posts/dhcp/</guid><description>&lt;p>新开了一个支线任务：探索Linux Common Port&lt;/p>
&lt;ul>
&lt;li>本次任务：&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>端口&lt;/th>
 &lt;th>描述&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>67 (UDP)&lt;/td>
 &lt;td>Used by the DHCP server (Dynamic Host Configuration Protocol).&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>68 (UDP)&lt;/td>
 &lt;td>Used by a DHCP client.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>67和68两个端口用于DHCP协议，分别是服务端和客户端&lt;br>
DHCP是应用层协议，传输层协议使用的是UDP&lt;/p>
&lt;h2 id="什么是dhcp">
 什么是DHCP
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%afdhcp">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>DHCP(Dynamic Host Configurration Protocol)协议，动态路由配置协议，用于动态分配IP&lt;/p>
&lt;p>你走进咖啡厅，用手机连接咖啡厅的公共wifi，此时你的手机将需要被动态分配一个IP，才能用语网络通信，那么这个动态IP由谁负责给你，又是通过什么方式给你呢？&lt;/p>
&lt;p>一般负责动态IP分配的是路由器，而分配动态IP所遵循的协议就是DHCP，下面就是你从连接咖啡厅wifi到分配ip的过程：&lt;/p>
&lt;ol>
&lt;li>当你的手机连接到咖啡厅的公共WiFi网络时,它会向WiFi路由器发送请求,希望获得一个IP地址以接入互联网。&lt;/li>
&lt;li>路由器上运行着DHCP(动态主机配置协议)服务,它负责动态分配IP地址。DHCP服务器会从可用的内网IP地址池中选择一个空闲的IP地址,并将其分配给你的手机。&lt;/li>
&lt;li>DHCP服务器把分配的IP地址、子网掩码、默认网关等信息以DHCP协议的方式发送回你的手机。&lt;/li>
&lt;li>你的手机收到DHCP服务器的响应后,就可以使用这个动态分配的内网IP地址来接入互联网了。&lt;/li>
&lt;/ol>
&lt;p>上面获取动态IP的过程就是DHCP&lt;/p>
&lt;h2 id="dhcp-的具体过程">
 DHCP 的具体过程
 &lt;a class="heading-link" href="#dhcp-%e7%9a%84%e5%85%b7%e4%bd%93%e8%bf%87%e7%a8%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>简单来说，四次通信即可完成。&lt;/p>
&lt;p>(Discover) client -&amp;gt; servers 广播 Hi，当前广播区域内谁可以给我分配一个动态IP？&lt;br>
(Offer) server A -&amp;gt; client 单播 我可以给你一个动态IP地址！你的地址是xxx，子网掩码是xxx，dns服务器是xxx，以及其他有用的信息&lt;br>
(Request) client -&amp;gt; servers 广播 我觉得server A 很不错，我要选定server A提供给我的动态IP地址&lt;br>
(ACK) server A -&amp;gt; client 单播 这里是你的动态IP地址！你的地址是xxx，子网掩码是xxx，dns服务器是xxx，以及其他有用的信息&lt;/p></description></item><item><title>使用karabiner实现vim的中英文输入法丝滑切换</title><link>https://binc4t.github.io/posts/vim-switch-cn-en/</link><pubDate>Sat, 24 Feb 2024 17:56:47 +0800</pubDate><guid>https://binc4t.github.io/posts/vim-switch-cn-en/</guid><description>&lt;p>#vim&lt;/p>
&lt;h2 id="背景">
 背景
 &lt;a class="heading-link" href="#%e8%83%8c%e6%99%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>vim从编辑模式退出到普通模式下的时候，需要手动切换到英文输入法，其他编辑器的vim模式同样存在此问题，我想在vim退出编辑模式时自动切换为英文输入法&lt;/p>
&lt;p>实现这个功能有两个思路：&lt;/p>
&lt;ul>
&lt;li>vim插件&lt;/li>
&lt;li>修改键盘映射
vim插件的办法这里不做介绍，因为vim插件无法在其他编辑器的vim模式下使用&lt;/li>
&lt;/ul>
&lt;p>这里采用&lt;a href="https://karabiner-elements.pqrs.org/" class="external-link" target="_blank" rel="noopener">karabiner&lt;/a>修改键位映射来实现，karabiner是一个很方便的键位修改软件，我一直在使用，解决此问题的思路是：修改ESC的键盘映射，实现在按下ESC的同时，修改输入法为英文&lt;/p>
&lt;h2 id="如何实现">
 如何实现
 &lt;a class="heading-link" href="#%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>karabiner 允许用户通过json的形式自定义键位映射，点击下面红框部分，可以通过一段json来自定义键位的行为
&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/20240224174646.png" alt="">&lt;/p>
&lt;p>下面是实现该功能的json配置，其含义是：
在当前输入法不是英文的前提下，按下ESC时，会先按下ESC，同时把输入法切换为英文&lt;/p>
&lt;p>这段json的语法是karabiner的json配置语法，可以在karabiner官网找到详细的&lt;a href="https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition" class="external-link" target="_blank" rel="noopener">karabiner json语法介绍&lt;/a>，语法还是比较直观的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;ESC: ESC and language to en&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;manipulators&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;basic&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;conditions&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;input_source_unless&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;input_sources&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;input_source_id&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;^com\\.apple\\.keylayout\\.ABC$&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;language&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;^en$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;from&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;key_code&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;escape&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;to&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;key_code&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;escape&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;select_input_source&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;input_source_id&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;^com\\.apple\\.keylayout\\.ABC$&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0550ae">&amp;#34;language&amp;#34;&lt;/span>&lt;span style="color:#1f2328">:&lt;/span> &lt;span style="color:#0a3069">&amp;#34;^en$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在karabiner启用这段json配置之后，就可以体验丝滑的vim中英文切换了！&lt;/p></description></item><item><title>dnsmasq 使用备忘</title><link>https://binc4t.github.io/posts/dnsmasq/</link><pubDate>Fri, 12 Jan 2024 23:04:41 +0800</pubDate><guid>https://binc4t.github.io/posts/dnsmasq/</guid><description>&lt;p>最近在给手机测试时，想要把手机上对特定域名的请求劫持到Mac上来，就需要用到dnsmasq，把Mac变成一个dns服务器，然后手机的dns服务器地址修改到mac上来。下面做一个配置备忘&lt;/p>
&lt;p>参考：https://blog.niekun.net/archives/1869.html&lt;/p>
&lt;p>省略安装步骤，debian用 &lt;code>apt install&lt;/code>，mac用 &lt;code>brew install&lt;/code> 即可，下面进行配置&lt;/p>
&lt;p>dnsmasq会按照一定的顺序去进行域名解析&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>首先是系统以及自定义的hosts文件： /etc/hosts /etc/hosts.dnsmasq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>然后是上游dns server，定义在：resolv.dnsmasq.conf 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认dns server记录在&lt;code>/etc/resolv.conf&lt;/code>文件中，既然我们要使用dnsmasq来做dns服务器，那么就应该让dnsmasq能够查询系统原本的dns sever，等于是用dnsmasq做了一个中继&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cp /etc/resolv.conf /etc/resolv.dnsmasq.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在/etc/resolv.conf文件中，将内容改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nameserver 127.0.0.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就把本机的dns server指向了 127.0.0.1，这时候机器的dns请求就会发往127.0.0.1的53端口，dns默认监听端口，也是dnsmasq的监听端口&lt;/p>
&lt;p>这里注意，在mac上需要在设置-网络-DNS中修改DNS服务器·&lt;/p>
&lt;p>然后再在 &lt;code>/etc/dnsmasq.conf&lt;/code> 文件中输入配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 监听地址：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 如果只写 127.0.0.1 则只处理本机的 DNS 解析，不写这句默认监听所有网口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># listen-address=127.0.0.1,192.168.8.132&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 指定自定义 hosts 文件：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addn-hosts&lt;span style="color:#0550ae">=&lt;/span>/etc/hosts.dnsmasq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 指定上游 DNS 服务列表的配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resolv-file&lt;span style="color:#0550ae">=&lt;/span>/etc/resolv.dnsmasq.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 按照 DNS 列表一个个查询，不重新排列 DNS server 的顺序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strict-order
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"># 表示对下面设置的所有 server 发起查询请求，选择响应最快的服务器的结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all-servers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样配置过程就完成了！&lt;/p></description></item><item><title>2023 阅读记录</title><link>https://binc4t.github.io/posts/reading_2023/</link><pubDate>Sun, 31 Dec 2023 10:06:39 +0800</pubDate><guid>https://binc4t.github.io/posts/reading_2023/</guid><description>&lt;h1 id="2023-读书记录">
 2023 读书记录
 &lt;a class="heading-link" href="#2023-%e8%af%bb%e4%b9%a6%e8%ae%b0%e5%bd%95">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="在读">
 在读
 &lt;a class="heading-link" href="#%e5%9c%a8%e8%af%bb">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://book.douban.com/subject/25900403/" class="external-link" target="_blank" rel="noopener">Unix环境高级编程&lt;/a> APUE 经典名著&amp;hellip; &lt;br>
15章 进程间通信 1，2，3&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/30348061/" class="external-link" target="_blank" rel="noopener">自己动手实现Lua&lt;/a> 23% 哪个程序员能拒绝自己实现一台虚拟机呢&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/10797189/" class="external-link" target="_blank" rel="noopener">编写可读代码的艺术&lt;/a> 30% 短小精悍&lt;/p>
&lt;h2 id="在刷">
 在刷
 &lt;a class="heading-link" href="#%e5%9c%a8%e5%88%b7">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>MIT 6.824 分布式系统课程 &lt;a href="http://nil.csail.mit.edu/6.824/2022/schedule.html" class="external-link" target="_blank" rel="noopener">课件&lt;/a> &lt;a href="https://www.bilibili.com/video/BV1CU4y1P7PE/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=a81ed9570e0a579c831aa7813da34f43" class="external-link" target="_blank" rel="noopener">视频&lt;/a>&lt;/p>
&lt;ul>
&lt;li>1章 Introduction&lt;/li>
&lt;li>2章 RPC and Threads&lt;/li>
&lt;li>3章 GFS&lt;/li>
&lt;/ul>
&lt;h2 id="读完">
 读完
 &lt;a class="heading-link" href="#%e8%af%bb%e5%ae%8c">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://book.douban.com/subject/27120520/" class="external-link" target="_blank" rel="noopener">Head First JavaScript程序设计&lt;/a> 娓娓道来，培养兴趣，入门好书&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/35236126/" class="external-link" target="_blank" rel="noopener">那些想红的年轻人&lt;/a> 介绍自媒体商业模式和自媒体从业者心路历程的好书，作者很真诚，值得一看&lt;/p></description></item><item><title>Go by Example</title><link>https://binc4t.github.io/posts/go-by-example/</link><pubDate>Sun, 10 Dec 2023 13:36:32 +0800</pubDate><guid>https://binc4t.github.io/posts/go-by-example/</guid><description>&lt;h1 id="重归基础">
 重归基础
 &lt;a class="heading-link" href="#%e9%87%8d%e5%bd%92%e5%9f%ba%e7%a1%80">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>通过例子来学习Go&lt;br>
英文版本：https://gobyexample.com/&lt;br>
中文版本：https://gobyexample-cn.github.io/&lt;/p>
&lt;h1 id="笔记">
 笔记
 &lt;a class="heading-link" href="#%e7%ac%94%e8%ae%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="迭代和递归">
 迭代和递归
 &lt;a class="heading-link" href="#%e8%bf%ad%e4%bb%a3%e5%92%8c%e9%80%92%e5%bd%92">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>重新感受一下斐波那契数列的递归和迭代算法性能差距&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// feb.go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">func&lt;/span> &lt;span style="color:#6639ba">FebRecursive&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">n&lt;/span> &lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">n&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">n&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">1&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">FebRecursive&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">n&lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#6639ba">FebRecursive&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">n&lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">func&lt;/span> &lt;span style="color:#6639ba">FebIterative&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">n&lt;/span> &lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">n&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">a&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#1f2328">b&lt;/span> &lt;span style="color:#0550ae">:=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#0550ae">:=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#1f2328">&amp;lt;&lt;/span> &lt;span style="color:#1f2328">n&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span>&lt;span style="color:#0550ae">++&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#1f2328">b&lt;/span> &lt;span style="color:#1f2328">=&lt;/span> &lt;span style="color:#1f2328">a&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#1f2328">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#1f2328">a&lt;/span> &lt;span style="color:#1f2328">=&lt;/span> &lt;span style="color:#1f2328">b&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#1f2328">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#1f2328">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// feb_test.go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">func&lt;/span> &lt;span style="color:#6639ba">Benchmark_FebIterative&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">b&lt;/span> &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">testing&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">B&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#0550ae">:=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#1f2328">&amp;lt;&lt;/span> &lt;span style="color:#1f2328">b&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">N&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span>&lt;span style="color:#0550ae">++&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#6639ba">FebIterative&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">30&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">func&lt;/span> &lt;span style="color:#6639ba">Benchmark_FebRecursive&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">b&lt;/span> &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">testing&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">B&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#0550ae">:=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span> &lt;span style="color:#1f2328">&amp;lt;&lt;/span> &lt;span style="color:#1f2328">b&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">N&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#1f2328">i&lt;/span>&lt;span style="color:#0550ae">++&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#6639ba">FebRecursive&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">30&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="字符串和rune">
 字符串和rune
 &lt;a class="heading-link" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%92%8crune">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>调用 len 得到字节长度
for range 是按照rune来遍历&lt;/p></description></item><item><title>学习 sentinel-golang 的滑动窗口实现</title><link>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</link><pubDate>Sun, 03 Sep 2023 10:06:39 +0800</pubDate><guid>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</guid><description>&lt;h2 id="前言">
 前言
 &lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>最近工作中需要用到限频的功能，限制同IP在一定时间内的访问量，又因为想做成统计周期可配置，所以令牌桶不太适用，需要用滑动窗口来实现，发现了一个专门做流量访问控制的阿里的开源项目&lt;a href="link:https://github.com/alibaba/sentinel-golang" >&lt;strong>sentinel&lt;/strong>&lt;/a>，奈何自己太菜了，直接引用了其中的滑动窗口的实现，不过还是学习了人家的写法并记录在这里&lt;/p>
&lt;h2 id="滑动窗口的基本属性">
 滑动窗口的基本属性
 &lt;a class="heading-link" href="#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>滑动窗口有两个最基本的属性，长度以及分桶数；长度决定了这个窗口有多长，也就是统计周期；分桶数决定了这个窗口的统计颗粒度。&lt;/p>
&lt;p>那么滑动窗口该怎么实现呢？&lt;/p>
&lt;p>滑动窗口不断向前滚动，采用新的数据，抛弃旧的数据，就很容易让人联想到环形数组。都是不断淘汰旧的数据，每次关心的只有这个环的大小，更新的和更旧的数据都不关心。&lt;/p>
&lt;p>一起看一下sentinel-golang中的滑动窗口实现吧&lt;/p>
&lt;h2 id="sentinel-golang的滑动窗口实现">
 sentinel-golang的滑动窗口实现
 &lt;a class="heading-link" href="#sentinel-golang%e7%9a%84%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e5%ae%9e%e7%8e%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;h3 id="定义一个桶">
 定义一个桶
 &lt;a class="heading-link" href="#%e5%ae%9a%e4%b9%89%e4%b8%80%e4%b8%aa%e6%a1%b6">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>首先定义一个桶，最简单的桶就是一个counter，下面的&lt;code>MetricBucket&lt;/code>就定义了一个桶，这里的counter是二维统计，可以将Pass, Reject, Total等维度分别统计，下面的&lt;code>minRT&lt;/code>和&lt;code>maxConcurrency&lt;/code>可以暂时不用关心， 可以看出一个桶本质上就是一个counter&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">type&lt;/span> &lt;span style="color:#1f2328">MetricBucket&lt;/span> &lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#57606a">// Value of statistic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">counter&lt;/span> &lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#1f2328">base&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">MetricEventTotal&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#cf222e">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">minRt&lt;/span> &lt;span style="color:#cf222e">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">maxConcurrency&lt;/span> &lt;span style="color:#cf222e">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过面的函数可以对counter值做加法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">func&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">mb&lt;/span> &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">MetricBucket&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#6639ba">addCount&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#1f2328">event&lt;/span> &lt;span style="color:#1f2328">base&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">MetricEvent&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#1f2328">count&lt;/span> &lt;span style="color:#cf222e">int64&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#1f2328">atomic&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#6639ba">AddInt64&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mb&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#1f2328">counter&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#1f2328">event&lt;/span>&lt;span style="color:#1f2328">],&lt;/span> &lt;span style="color:#1f2328">count&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的桶放之四海皆可，但是如果想成为个滑动窗口用桶，只有counter是不够的，因为滑动窗口中的每一个桶还有时间的概念，BucketWrap是对桶的封装，添加了开始时间&lt;code>BucketStart&lt;/code>，Value中存放的是一个&lt;code>*MetricBucket&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>type BucketWrap struct {
	// BucketStart represents start timestamp of this statistic bucket wrapper.
	BucketStart uint64
	// Value represents the actual data structure of the metrics (e.g. MetricBucket).
	Value atomic.Value
}
&lt;/code>&lt;/pre>&lt;h3 id="定义桶数组">
 定义桶数组
 &lt;a class="heading-link" href="#%e5%ae%9a%e4%b9%89%e6%a1%b6%e6%95%b0%e7%bb%84">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>&lt;code>AtomicBucketWrapArray&lt;/code>是一个环形数组的实现&lt;/p></description></item><item><title>Tendermint笔记</title><link>https://binc4t.github.io/posts/tendermint/</link><pubDate>Fri, 15 Apr 2022 00:41:31 +0800</pubDate><guid>https://binc4t.github.io/posts/tendermint/</guid><description>&lt;h1 id="参考资料">
 参考资料
 &lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://www.notion.so/Tendermint-Core-3be8256293ae4c36810d2155477bf34c#d931765e36f7423f877333244aa81d0c" class="external-link" target="_blank" rel="noopener">什么是Tendermint&lt;/a>&lt;/p>
&lt;h1 id="什么是tendermint">
 什么是Tendermint
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%aftendermint">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Tendermint 是一种区块链的构建工具，或者区块链的开发框架，能够帮助开发者快速构建一条区块链。它主要包含两个部分：Tendermint Core 以及 ABCI(Application Blockchain Interface)，前者通过BFT实现了一种共识协议以及P2P网络通信，后者则定义了搭建在 Tendermint Core 之上的应用层接口。&lt;/p>
&lt;p>Tendermint Core 将区块链共识协议层和对等网络通信层实现，使得开发者能够不用过分关心复杂的底层实现，而专注于应用层开发。借用&lt;a href="https://www.youtube.com/watch?v=V0JdeRzVndI&amp;amp;t=113s" class="external-link" target="_blank" rel="noopener">Dan Boneh&lt;/a>提到的区块链网络分层模型，我认为Tendermint Core实现了下两层的内容，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://yyypics.oss-cn-beijing.aliyuncs.com/Untitled-2022-04-16-2352.svg" alt="区块链网络分层模型">&lt;/p></description></item><item><title>pbft笔记</title><link>https://binc4t.github.io/posts/pbft/</link><pubDate>Tue, 12 Apr 2022 23:36:57 +0800</pubDate><guid>https://binc4t.github.io/posts/pbft/</guid><description>&lt;h1 id="参考资料">
 参考资料
 &lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf" class="external-link" target="_blank" rel="noopener">PBFT 论文&lt;/a>&lt;br>
&lt;a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/consensus/pbft.html" class="external-link" target="_blank" rel="noopener">FISCO-BCOS的PBFT介绍&lt;/a>&lt;br>
&lt;a href="https://www.youtube.com/watch?v=Uj638eFIWg8" class="external-link" target="_blank" rel="noopener">Liskov对PBFT的讲解&lt;/a>&lt;br>
&lt;a href="https://docs.tendermint.com/master/introduction/what-is-tendermint.html" class="external-link" target="_blank" rel="noopener">What is Tendermint&lt;/a>&lt;/p>
&lt;h1 id="论文笔记">
 论文笔记
 &lt;a class="heading-link" href="#%e8%ae%ba%e6%96%87%e7%ac%94%e8%ae%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="一些记录">
 一些记录
 &lt;a class="heading-link" href="#%e4%b8%80%e4%ba%9b%e8%ae%b0%e5%bd%95">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;code>3f+1&lt;/code> is the minimum number of replicas that allow an asynchronous system to provide the safety and liveness properties when up to &lt;code>f&lt;/code> replicas are faulty&lt;/p>
&lt;p>在一个由&lt;code>3f+1&lt;/code>个节点构成的系统中，最多有&lt;code>f&lt;/code>个恶意节点，才能保证系统的safty和liveness&lt;/p>
&lt;p>This many replicas are needed because it must be possible to proceed after communicating with &lt;code>n-f&lt;/code> replicas, since &lt;code>f&lt;/code> replicas might be faulty and not responding. However, it is possible that the &lt;code>f&lt;/code> replicas that did not respond are not faulty and, therefore, &lt;code>f&lt;/code> of those that responded might be faulty. Even so, there must still be enough responses that those from non-faulty replicas outnumber those from faulty ones, i.e., &lt;code>n-2f&lt;/code>. Therefore &lt;code>n &amp;gt; 3f&lt;/code>.&lt;/p></description></item><item><title>刷题记录</title><link>https://binc4t.github.io/posts/rp-diary/</link><pubDate>Sat, 02 Apr 2022 00:15:03 +0800</pubDate><guid>https://binc4t.github.io/posts/rp-diary/</guid><description>&lt;h1 id="刷题统计">
 刷题统计
 &lt;a class="heading-link" href="#%e5%88%b7%e9%a2%98%e7%bb%9f%e8%ae%a1">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h1 id="41">
 4.1
 &lt;a class="heading-link" href="#41">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>&lt;strong>二分搜索&lt;/strong>&lt;br>
704. Binary Search&lt;br>
278. First Bad Version&lt;br>
35. Search Insert Position&lt;/p>
&lt;h1 id="42">
 4.2
 &lt;a class="heading-link" href="#42">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>&lt;strong>双指针&amp;amp;矩阵搜索&lt;/strong>&lt;br>
#3 无重复字符的最长子串&lt;br>
#19 删除链表的倒数第 N 个结点&lt;br>
#876 链表的中间结点 &lt;br>
#557 反转字符串中的单词 III &lt;br>
#240 搜索二维矩阵 II&lt;br>
#344 反转字符串 &lt;br>
#11 盛最多水的容器&lt;br>
#167 两数之和 II - 输入有序数组&lt;br>
#283 移动零 &lt;br>
#189 轮转数组&lt;br>
#977 有序数组的平方&lt;/p>
&lt;h1 id="43">
 4.3
 &lt;a class="heading-link" href="#43">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>&lt;strong>滑动窗口&lt;/strong>&lt;br>
#567 字符串的排列&lt;br>
#3 无重复字符的最长子串&lt;br>
#567 字符串的排列&lt;br>
&lt;strong>栈和队列&lt;/strong> &lt;br>
#232 用栈实现队列&lt;br>
#20 有效的括号&lt;br>
&lt;strong>链表&lt;/strong>&lt;br>
#206 反转链表&lt;/p></description></item><item><title>关于我</title><link>https://binc4t.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binc4t.github.io/about/</guid><description>&lt;p>我是 BinCat，26岁，想成为一个 Web3 Builder，感谢您的访问！&lt;/p>
&lt;p>&lt;a href="https://github.com/binc4t">&lt;img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub 图标" style="width: 25px; height: 25px;"/> binc4t&lt;/a>
 | 
&lt;a href="https://x.com/binc4t">&lt;img src="https://yyypics.oss-cn-beijing.aliyuncs.com/logo-black.png" alt="X 图标" style="width: 20px; height: 20px;"/> binc4t&lt;/a>&lt;/p></description></item><item><title>友链</title><link>https://binc4t.github.io/friend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binc4t.github.io/friend/</guid><description>&lt;div class="friends-list">
 &lt;ul>
 &lt;li>
 &lt;a href="https://allenzhuer.github.io/" target="_blank">Allen&lt;/a>
 &lt;span> - 交易的神 &lt;/span>
 &lt;/li>
 &lt;li>
 &lt;a href="https://tiankaihang.github.io/" target="_blank">Tiankai Hang&lt;/a>
 &lt;span> - 学术巨人 &lt;/span>
 &lt;/li>
 &lt;/ul>
&lt;/div>
&lt;style>
.friends-list ul {
 list-style-type: none;
 padding-left: 0;
}

.friends-list li {
 margin-bottom: 10px;
}

.friends-list a {
 font-weight: bold;
 color: #f7a072;
 text-decoration: none;
}

.friends-list a:hover {
 text-decoration: underline;
}

.friends-list span {
 color: #666;
}
&lt;/style></description></item><item><title>读书记录 和一些杂七杂八</title><link>https://binc4t.github.io/reading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binc4t.github.io/reading/</guid><description>&lt;h2 id="2025">
 2025
 &lt;a class="heading-link" href="#2025">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>在读&lt;br>
&lt;a href="https://book.douban.com/subject/26822106/" class="external-link" target="_blank" rel="noopener">《图解密码技术》&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/27093851/" class="external-link" target="_blank" rel="noopener">《以交易为生》&lt;/a>&lt;/p>
&lt;p>有时间的话再重温一下《深入理解以太坊》&lt;/p>
&lt;h2 id="2024">
 2024
 &lt;a class="heading-link" href="#2024">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://book.douban.com/subject/36457109/" class="external-link" target="_blank" rel="noopener">《程序员的readme》&lt;/a> 非常全面且精炼。涉及代码编写，测试，团队协作，技术评审，职业规划和晋升等等方面。适合每一个新手程序员阅读。&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/35690920/" class="external-link" target="_blank" rel="noopener">《海龟交易法则》&lt;/a> 读了一部分，建立交易系统，不要让心理因素影响自己。&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/27079479/" class="external-link" target="_blank" rel="noopener">《南方高速》&lt;/a> 科塔萨尔的短篇小说集&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/35650456/" class="external-link" target="_blank" rel="noopener">《跨越不可能》&lt;/a> 坚毅力，学习力，心流体验&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/36044253/" class="external-link" target="_blank" rel="noopener">《软技能 第二版》&lt;/a> 基本是遛弯听完的， 关于创业和自我营销&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/6060455/" class="external-link" target="_blank" rel="noopener">《浮世画家》&lt;/a> 石黑一雄作品，因为诺奖慕名而读，以主人公小野的视角展开叙事，描述了浮世画家小野退休后和他的女儿、外孙之间的各种生活画面，穿插大量回忆，读的时候觉得故事有些过于平淡，不太有持续阅读的兴趣，另外对于女性的态度、对于战争的态度也让人读起来不太愉悦&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/30347596/" class="external-link" target="_blank" rel="noopener">《对赌》&lt;/a> 德扑职业选手写成，纯粹的决策教程，如何做出好决策，我认为比起成功人士，德扑职业选手的决策建议更具参考价值，因为成功是个开放题，成功人士的回忆录不包含决策的全貌，而且往往对运气轻描淡写，或者是带有谦虚的意味。德扑牌桌上，纯粹到没有任何场外因素，针对有限的知识，做出最大可能造成好结果的决策，避免无法承受的失败。&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/36636224/" class="external-link" target="_blank" rel="noopener">《打造第二大脑》&lt;/a> 优秀信息管理者的三个习惯：项目清单，总结复盘，处处留意，另外也提到了广为人知的 PARA，CODE 信息整理方法&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/35324326/" class="external-link" target="_blank" rel="noopener">《金阁寺》&lt;/a> 不太理解主人公那种把美好的东西毁掉的冲动，但是题外话，金阁寺真的很美，有兴趣过一次，金闪闪的外表令人难忘&lt;/p>
&lt;p>&lt;a href="https://book.douban.com/subject/35449832/" class="external-link" target="_blank" rel="noopener">《最小阻力之路》&lt;/a> 人总是沿着最小阻力方向前进，利用这个原理，建立系统让自己朝着希望的方向前进&lt;/p>
&lt;p>&lt;a href="https://store.steampowered.com/app/638230/Journey/" class="external-link" target="_blank" rel="noopener">Journey&lt;/a> steam上一款游戏，与其说是游戏，更像是一场电影，画面、配乐都很艺术，花9块钱和105分钟体验的浪漫旅程。&lt;/p>
&lt;p>&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/20240415224454.png" alt="">&lt;/p></description></item></channel></rss>