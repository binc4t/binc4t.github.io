<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on where dream begins!</title><link>https://binc4t.github.io/posts/</link><description>Recent content in Posts on where dream begins!</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Dec 2023 13:36:32 +0800</lastBuildDate><atom:link href="https://binc4t.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Go by Example</title><link>https://binc4t.github.io/posts/go-by-example/</link><pubDate>Sun, 10 Dec 2023 13:36:32 +0800</pubDate><guid>https://binc4t.github.io/posts/go-by-example/</guid><description>重归基础 通过例子来学习Go
英文版本：https://gobyexample.com/
中文版本：https://gobyexample-cn.github.io/
笔记 迭代和递归 重新感受一下斐波那契数列的递归和迭代算法性能差距
// feb.go func FebRecursive(n int) int { if n == 0 { return 0 } if n == 1 { return 1 } return FebRecursive(n-1) + FebRecursive(n-2) } func FebIterative(n int) int { if n == 0 { return 0 } a, b := 0, 1 for i := 1; i &amp;lt; n; i++ { b = a + b a = b - a } return b } // feb_test.</description></item><item><title>学习 sentinel-golang 的滑动窗口实现</title><link>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</link><pubDate>Sun, 03 Sep 2023 10:06:39 +0800</pubDate><guid>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</guid><description>前言 最近工作中需要用到限频的功能，限制同IP在一定时间内的访问量，又因为想做成统计周期可配置，所以令牌桶不太适用，需要用滑动窗口来实现，发现了一个专门做流量访问控制的阿里的开源项目sentinel，奈何自己太菜了，直接引用了其中的滑动窗口的实现，不过还是学习了人家的写法并记录在这里
滑动窗口的基本属性 滑动窗口有两个最基本的属性，长度以及分桶数；长度决定了这个窗口有多长，也就是统计周期；分桶数决定了这个窗口的统计颗粒度。
那么滑动窗口该怎么实现呢？
滑动窗口不断向前滚动，采用新的数据，抛弃旧的数据，就很容易让人联想到环形数组。都是不断淘汰旧的数据，每次关心的只有这个环的大小，更新的和更旧的数据都不关心。
一起看一下sentinel-golang中的滑动窗口实现吧
sentinel-golang的滑动窗口实现 定义一个桶 首先定义一个桶，最简单的桶就是一个counter，下面的MetricBucket就定义了一个桶，这里的counter是二维统计，可以将Pass, Reject, Total等维度分别统计，下面的minRT和maxConcurrency可以暂时不用关心， 可以看出一个桶本质上就是一个counter
type MetricBucket struct { // Value of statistic counter [base.MetricEventTotal]int64 minRt int64 maxConcurrency int32 } 通过面的函数可以对counter值做加法
func (mb *MetricBucket) addCount(event base.MetricEvent, count int64) { atomic.AddInt64(&amp;amp;mb.counter[event], count) } 上面的桶放之四海皆可，但是如果想成为个滑动窗口用桶，只有counter是不够的，因为滑动窗口中的每一个桶还有时间的概念，BucketWrap是对桶的封装，添加了开始时间BucketStart，Value中存放的是一个*MetricBucket
type BucketWrap struct { // BucketStart represents start timestamp of this statistic bucket wrapper. BucketStart uint64 // Value represents the actual data structure of the metrics (e.g. MetricBucket). Value atomic.</description></item><item><title>Tendermint笔记</title><link>https://binc4t.github.io/posts/tendermint/</link><pubDate>Fri, 15 Apr 2022 00:41:31 +0800</pubDate><guid>https://binc4t.github.io/posts/tendermint/</guid><description>参考资料 什么是Tendermint
什么是Tendermint Tendermint 是一种区块链的构建工具，或者区块链的开发框架，能够帮助开发者快速构建一条区块链。它主要包含两个部分：Tendermint Core 以及 ABCI(Application Blockchain Interface)，前者通过BFT实现了一种共识协议以及P2P网络通信，后者则定义了搭建在 Tendermint Core 之上的应用层接口。
Tendermint Core 将区块链共识协议层和对等网络通信层实现，使得开发者能够不用过分关心复杂的底层实现，而专注于应用层开发。借用Dan Boneh提到的区块链网络分层模型，我认为Tendermint Core实现了下两层的内容，如下图所示。</description></item><item><title>pbft笔记</title><link>https://binc4t.github.io/posts/pbft/</link><pubDate>Tue, 12 Apr 2022 23:36:57 +0800</pubDate><guid>https://binc4t.github.io/posts/pbft/</guid><description>参考资料 PBFT 论文
FISCO-BCOS的PBFT介绍
Liskov对PBFT的讲解
What is Tendermint
论文笔记 一些记录 3f+1 is the minimum number of replicas that allow an asynchronous system to provide the safety and liveness properties when up to f replicas are faulty
在一个由3f+1个节点构成的系统中，最多有f个恶意节点，才能保证系统的safty和liveness
This many replicas are needed because it must be possible to proceed after communicating with n-f replicas, since f replicas might be faulty and not responding. However, it is possible that the f replicas that did not respond are not faulty and, therefore, f of those that responded might be faulty.</description></item><item><title>刷题记录</title><link>https://binc4t.github.io/posts/rp-diary/</link><pubDate>Sat, 02 Apr 2022 00:15:03 +0800</pubDate><guid>https://binc4t.github.io/posts/rp-diary/</guid><description>刷题统计 4.1 二分搜索
704. Binary Search
278. First Bad Version
35. Search Insert Position
4.2 双指针&amp;amp;矩阵搜索
#3 无重复字符的最长子串
#19 删除链表的倒数第 N 个结点
#876 链表的中间结点 #557 反转字符串中的单词 III #240 搜索二维矩阵 II
#344 反转字符串 #11 盛最多水的容器
#167 两数之和 II - 输入有序数组
#283 移动零 #189 轮转数组
#977 有序数组的平方
4.3 滑动窗口
#567 字符串的排列
#3 无重复字符的最长子串
#567 字符串的排列
栈和队列 #232 用栈实现队列
#20 有效的括号
链表
#206 反转链表
4.4 二叉树
#236 二叉树的最近公共祖先
#117 填充每个节点的下一个右侧节点指针 II
#116 填充每个节点的下一个右侧节点指针</description></item><item><title/><link>https://binc4t.github.io/posts/reading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binc4t.github.io/posts/reading/</guid><description>2023 读书记录 在读 Unix环境高级编程 APUE 经典名著&amp;hellip; 15章 进程间通信 1，2，3
自己动手实现Lua 23% 哪个程序员能拒绝自己实现一台虚拟机呢
编写可读代码的艺术 30% 短小精悍
在刷 MIT 6.824 分布式系统课程 课件 视频
1章 Introduction 2章 RPC and Threads 3章 GFS 读完 Head First JavaScript程序设计 娓娓道来，培养兴趣，入门好书
那些想红的年轻人 介绍自媒体商业模式和自媒体从业者心路历程的好书，作者很真诚，值得一看</description></item></channel></rss>