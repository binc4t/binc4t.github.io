<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on where dream begins!</title><link>https://binc4t.github.io/posts/</link><description>Recent content in Posts on where dream begins!</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 24 Oct 2025 03:05:07 +0800</lastBuildDate><atom:link href="https://binc4t.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>信息阶级论</title><link>https://binc4t.github.io/posts/info_class_theory/</link><pubDate>Fri, 24 Oct 2025 03:05:07 +0800</pubDate><guid>https://binc4t.github.io/posts/info_class_theory/</guid><description>&lt;h1 id="信息阶级论"&gt;
 信息阶级论
 &lt;a class="heading-link" href="#%e4%bf%a1%e6%81%af%e9%98%b6%e7%ba%a7%e8%ae%ba"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;信息的传播造成信息的价值递减，信息的价值递减造成信息的阶级。&lt;/p&gt;
&lt;h2 id="abstract"&gt;
 Abstract
 &lt;a class="heading-link" href="#abstract"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;以新闻/社交媒体为主要研究对象，获取新闻的速度越快，信息源越靠近新闻的源头，那么这条信息的价值也就越高。一条新闻，从生产源头到普罗大众，经历了层层传递，每传递一层，信息的阶级便降一级，信息带来的潜在收益、甚至信息的真实性也会降低。信息上层阶级对信息下层阶级，有着巨大的信息差优势，包括时间和准确性上的优势。随着社会发展，普通人通过互联网/社媒等途径，更容易快速获取到接近信息源头的信息，使得这个信息差优势逐渐变弱，但这也是有门槛的，也许门槛从人脉/社会阶级的森严门槛，逐渐开放了一些“小口子”，通过掌握统计、计算机、金融等技能或知识，普通人也许可以通过这些小口子，得以吃到信息差的红利，尽管高阶信息不是看似遥不可及的存在，但是对于绝大多数普通人来说，仍然处于信息的低阶层次，也就是通过最末端的渠道来获取信息，那么就必定无法从信息的阶层差距上获取利益。&lt;/p&gt;
&lt;p&gt;21世纪初，腾讯，淘宝，百度，完成了从英文世界到中文世界的信息套利。在人们还不知道什么叫做互联网的时候，这几家公司已经把这个叫做互联网的东西，以及先进的商业模式引入进来。
00年代，率先掌握计算机技术的人吃到最大的时代红利之一，在很多人没有家用电脑的时刻，小部分人已经奔驰在享受信息高速公路上，在这条高速公路还一点不拥挤的时候。
10年代，加密货币走上历史舞台，愿意接受新鲜事物的人、要么投资、要么躬身入局、要么长期关注，都或多或少迟到了红利，当年郎咸平在电视上说：“比特币没有任何价值”，我当时还是个小朋友，这位大教授的观点我是一点都没有反驳的想法。如今来看，掌握着话语权的信息分发者（信息中介），也不一定总是对的，普通人也可以反驳他！（一个有趣的事实是：加密货币/区块链技术也蕴藏着对于信息阶级的冲击，因为链上的不可篡改和可追踪特性，使得任何人可以实现对信息的追踪，然而有它事实上反而造就了新的信息阶级，这是链上数据分析的高门槛以及各种内幕消息造就的）
20年代初，口罩元年，先得到信息的人完成了物理抢跑率先买到车票出城，晚一点就只能等待封城。甚至有人率先屯起了口罩，很快口罩就成了极度稀缺商品，如果不是国家出面调节，仅凭供需关系的话，口罩价格要突破天际。
最近几年，大模型火热，我很清楚地记得，在我周围还没有太多讨论的时候，推特上已经有很多人在发chatGPT的聊天页面，大家都对着新鲜东西特别感兴趣，很快我周围的环境、中文社媒上也铺天盖地了。这就和10年代的加密货币新型时很像，又很不像，最大的共同点就是都是某种比较革新性的具有特别广泛的全球影响力的新兴事物，最大的不同点在于，加密货币/区块链到如今10多年的发展下来，仍然是小圈子的游戏，但是我们可以看到AI在短短几年走入了生产生活的方方面面，并且在可预见的未来会深刻要影响整个社会的生产方式。&lt;/p&gt;
&lt;p&gt;任何时候都是如此，信息以一种看不见的方式从源头向下流动，就像长江水从西向东汇入大海一样，如果你在上游尿一泡尿，会“滋润”到下游每一个人，你尿的位置越靠上，你的潜在影响能力就越大。你越处于信息的上游，你的优势就越大。一个简单的道理是，从古至今，处于信息高位的人，拥有对信息的处置权，这个处置权并不是说你可以随意篡改信息，而是说，你对这些信息的利用相比后来者要从容得多。你甚至以此信息优势来完成对下游的“剥削”，事实上，这个剥削是存在的，这是血淋淋的事实。在一些交易领域，微秒级差距带来巨大利润价差，后来者只能高位接盘，太多如此的故事。更先掌握信息的人，就有更宽阔的发挥空间，就可以利用信息获取更大的利润。&lt;/p&gt;
&lt;p&gt;上面我说到了各种信息的价值，以及价值在传播递减。然而，为什么我会说信息的价值递减造成了信息的阶级？为什么要用阶级这个严重的词汇？其实单说价值递减造成阶级是不完全准确的，如果价值递减，那么大家都去获取高价值信息不久可以了，哪里存在阶级一说。问题就出在这里，信息的价值递减是客观存在的，然而另一个客观存在的事实是，高阶层信息的获取并非轻而易举、并不是那么容易突破的。综合起来才造成了信息阶级。&lt;/p&gt;
&lt;p&gt;在这里我先定义高阶信息：准确性、时效性、稀缺性越高的信息，就是越高阶的信息。然后讨论为什么跨越信息的阶级很难。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;垃圾信息多，难以辨别真正高阶的信息。虽然信息的流动速度加快了，信息的来源丰富了，但是垃圾信息夹杂其中。我记得我听过一个博客，那位媒体从业的前辈大佬，说他们之前所在媒体的工作就是每天制造垃圾信息，他也在这样的环境中训练出了识别真正高阶信息的本领。可见这是一个本领，是需要训练的，而不是天赋，很少有人能带着这样的天赋来到世界上，因为信息本来就不是先验的，人们从上帝那里打听善恶美丑，没人能从那里打听到社会运转的规则，和信息的流动规律。&lt;/li&gt;
&lt;li&gt;信息茧房的存在。媒体、KOL处于信息的上游，掌握了信息的解释权、分发权（这么说有稍微夸张的成分），将一手信息转变为更大众化的、更娱乐性的信息分发出去，社交APP在乎你是否获取到的了真正高阶的信息吗？完全不。他们在乎的只有你的使用时长、你的留存，他们在乎的只是你作为他们在周会上可以耀武扬威的一个用户留存数据罢了。KOL在乎你是否获取到高阶信息了吗？可以说在乎，但绝对不是首要在乎，KOL通过分享和传播信息带来价值，同时你也回馈给他们流量。他们可以选择将优质信息传达给你，但是你要知道，话一说出来就带着偏见，KOL传达的很多时候并不是信息，而是一种观点，一种情绪。更有一些坏蛋别有用心，将恶意篡改过的信息传达出来以达到邪恶的目的。更难的一点是，你很难辨别你是否正处于这样的茧房中，就像池塘里的鱼儿，自由徜徉于池中，却不觉得自己身在池中，更无法感知水面上的世界。（略夸张的说法）。&lt;/li&gt;
&lt;li&gt;大部分人主观上是不愿意获取高阶信息的，或者说不认为获取高阶信息有什么特别的必要性。高阶的信息需要寻找、找到了还要分辨、分辨过后还要对比、分析、归纳、验证，还要想办法利用起来，避免高阶低用（这是另一个大的话题了，信息的利用，这决定了信息的价值在你身上能够最终发挥出多少），每一步都需要我消耗额外的卡路里，那我肯定是不愿意干的，千百年来我储存的能量是为了我生存繁衍，我为什么要去做这些额外消耗的事情？大可不必去做了。
这只是我一气呵成想到的三点，还有很多难题摆在阶级跨越者的前方，这些综合起来构造了信息的阶级。这也是我信息阶级论的理论来源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总会有一些人，因为年龄的增长，见识的变化，甚至经历某种挫折、大起大落之后，突然认识到信息阶级的真实存在。那么他一定会先痛苦、然后再思考，如何跨过这种信息阶级。我们绝不能只谈现象和问题，而不谈方法。如同社会身份阶级一样，有人天生自带阶级，这个我们不必去探讨。处于社会身份地位高位的人，或者掌握特殊垄断渠道的人，天然拥有所谓“内幕消息”，这些我们也不讨论。我们就讨论，普通人如何尽可能打破信息阶级？
首先要意识到，社会的运行规则并不是说我有信息，我把信息像珍稀的玛瑙宝石一样藏起来，我就能获得信息的收益。信息的传播造成信息价值的递减，但也正因为传播才造就了信息的价值，如果信息不被更广泛的人知道，怎么能让更高阶的信息掌握者通过信息来获取利益呢？另外，也并不总是说我掌握真实信息，然后我要编一个虚假信息传播出去我才能获利（极为恶劣的盈利方式）。所以，信息是流动的，真实的有价值的信息也跳动于其中，只要能分辨、分析、利用起来，就可以最大限度的跨越信息阶级。这也有门槛，但这个门槛是努力可达的。&lt;/p&gt;
&lt;p&gt;下面是一些无论你处于各行各业，处于当今时代要想跨越信息的阶级，就必须掌握的技能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握一定的计算机技术
我们一定要给互联网的发明者磕个响头，正是互联网的发展带来了信息传播媒介的改变，至少从物理层面，信息的传播速度也变快了，让普通人有机会（仅仅是有机会而已）获取到更广泛（存疑）、更快速的信息。掌握互联网技术不是说能够浏览网页就行了，而是掌握一些通过计算机获取信息的工具，以及分析的工具。&lt;/li&gt;
&lt;li&gt;学习统计与概率，
用统计与概率的思想重新理解一遍这个世界，掌握了这样的技能，就可以通过统计分析认识社会运行的周期性、可以独立分析信息之间的联系，找到比高阶信息更有价值的东西：高阶信息背后蕴含的逻辑。&lt;/li&gt;
&lt;li&gt;学习基础的金融知识
世界是围绕着一个金融体系来运作的，学习金融能让你更深刻理解信息对这个世界的影响。&lt;/li&gt;
&lt;li&gt;对于中文世界的人来说，要掌握外语
信息阶级跨越的障碍除了上面说的三个普遍存在的问题，对于中文世界的人来说，还有一个客观存在的障碍就是外语，掌握外语（尤其是英语）的好处可以参考上面21世纪初三大公司的例子。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然也不是说一定要自己掌握这些技能，也许你有眼光和能力，找到这些技术的顶尖人才，将他们整合起来，你也就处于信息阶级的绝对上层了。&lt;/p&gt;
&lt;p&gt;最后想说的是，我们耗费额外的卡路里，锻炼额外的脑细胞，仅仅是稍微突破、稍微打开了信息阶级的裂缝，很可能终其一生无法站在信息链的顶端（即掌握着高阶信息的制造权的人），信息的流动价值递减并非线性，那些稍微突破了信息阶级的人，就可以获取巨大利润了，已经可以狠狠奖励自己一个鸡腿了。。哈哈，这些稍微突破信息阶级的人，又组成起来形成了新的信息剥削阶级，信息是流动的，信息价值是流动的，信息阶级中的人更是流动的，唯一能够长久存续的，是信息阶级自身。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文由 bincat 原创，首发于 &lt;a href="https://bincat.top" class="external-link" target="_blank" rel="noopener"&gt;bincat.top&lt;/a&gt;&lt;br&gt;
本文采用 &lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" class="external-link" target="_blank" rel="noopener"&gt;知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 (CC BY-NC-ND 4.0)&lt;/a&gt; 转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>NTP 协议</title><link>https://binc4t.github.io/posts/ntp/</link><pubDate>Fri, 07 Jun 2024 21:59:26 +0800</pubDate><guid>https://binc4t.github.io/posts/ntp/</guid><description>&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;&lt;strong&gt;Port&lt;/strong&gt;&lt;/th&gt;
 &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;123 (UDP)&lt;/td&gt;
 &lt;td&gt;NTP (Network Time Protocol).&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="什么是ntp协议"&gt;
 什么是NTP协议
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%afntp%e5%8d%8f%e8%ae%ae"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;NTP(Network Time Protocol) 网络时间协议，运行在123端口上， 用于时间同步&lt;/p&gt;
&lt;p&gt;NTP 通过分级的方式来组织所有节点，从0到15，共15级，0级是最准确的时间设备，从0级同步时间的设备是1级设备，依次类推&lt;/p&gt;
&lt;p&gt;网络上的设备是一个既做服务器又做客户端的模型，在从其他设备获取时间后，其他设备同样可以从你这里获取时间&lt;/p&gt;
&lt;p&gt;具体linux设备上，可以启动ntpd，ntpd通过ntp协议来同步时钟&lt;/p&gt;
&lt;h2 id="ntp协议的原理"&gt;
 NTP协议的原理
 &lt;a class="heading-link" href="#ntp%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%8e%9f%e7%90%86"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;NTP原理简单理解起来就是，
假设A想从B初同步时间，那么需要向B发起请求，B把自己的时间发给A，但是因为网络延迟的原因，B的消息传达给A要过一个单程延迟，因此A需要知道单程延迟是多少&lt;/p&gt;
&lt;p&gt;从A和B的两次通信中，其实就可以估算出网络延迟&lt;/p&gt;
&lt;p&gt;借用&lt;a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/NTP.html" class="external-link" target="_blank" rel="noopener"&gt;此处&lt;/a&gt;的图片来说明&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/202406072215855.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;br&gt;
t1 是客户端发送数据时, 客户端的时间
t2 是服务端收到数据时, 服务器的时间
t3 是服务端发送数据时, 服务器的时间
t4 是客户端收到数据时, 客户端的时间&lt;/p&gt;
&lt;p&gt;利用这四个时间就可以估算出延迟offset&lt;br&gt;
&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/202406072215103.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;client就可以用t3 + offset 来校准时间&lt;/p&gt;</description></item><item><title>DHCP 协议</title><link>https://binc4t.github.io/posts/dhcp/</link><pubDate>Sat, 01 Jun 2024 23:07:52 +0800</pubDate><guid>https://binc4t.github.io/posts/dhcp/</guid><description>&lt;p&gt;新开了一个支线任务：探索Linux Common Port&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本次任务：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;端口&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;67 (UDP)&lt;/td&gt;
 &lt;td&gt;Used by the DHCP server (Dynamic Host Configuration Protocol).&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;68 (UDP)&lt;/td&gt;
 &lt;td&gt;Used by a DHCP client.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;67和68两个端口用于DHCP协议，分别是服务端和客户端&lt;br&gt;
DHCP是应用层协议，传输层协议使用的是UDP&lt;/p&gt;
&lt;h2 id="什么是dhcp"&gt;
 什么是DHCP
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%afdhcp"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;DHCP(Dynamic Host Configurration Protocol)协议，动态路由配置协议，用于动态分配IP&lt;/p&gt;
&lt;p&gt;你走进咖啡厅，用手机连接咖啡厅的公共wifi，此时你的手机将需要被动态分配一个IP，才能用语网络通信，那么这个动态IP由谁负责给你，又是通过什么方式给你呢？&lt;/p&gt;
&lt;p&gt;一般负责动态IP分配的是路由器，而分配动态IP所遵循的协议就是DHCP，下面就是你从连接咖啡厅wifi到分配ip的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当你的手机连接到咖啡厅的公共WiFi网络时,它会向WiFi路由器发送请求,希望获得一个IP地址以接入互联网。&lt;/li&gt;
&lt;li&gt;路由器上运行着DHCP(动态主机配置协议)服务,它负责动态分配IP地址。DHCP服务器会从可用的内网IP地址池中选择一个空闲的IP地址,并将其分配给你的手机。&lt;/li&gt;
&lt;li&gt;DHCP服务器把分配的IP地址、子网掩码、默认网关等信息以DHCP协议的方式发送回你的手机。&lt;/li&gt;
&lt;li&gt;你的手机收到DHCP服务器的响应后,就可以使用这个动态分配的内网IP地址来接入互联网了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面获取动态IP的过程就是DHCP&lt;/p&gt;
&lt;h2 id="dhcp-的具体过程"&gt;
 DHCP 的具体过程
 &lt;a class="heading-link" href="#dhcp-%e7%9a%84%e5%85%b7%e4%bd%93%e8%bf%87%e7%a8%8b"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;简单来说，四次通信即可完成。&lt;/p&gt;
&lt;p&gt;(Discover) client -&amp;gt; servers 广播 Hi，当前广播区域内谁可以给我分配一个动态IP？&lt;br&gt;
(Offer) server A -&amp;gt; client 单播 我可以给你一个动态IP地址！你的地址是xxx，子网掩码是xxx，dns服务器是xxx，以及其他有用的信息&lt;br&gt;
(Request) client -&amp;gt; servers 广播 我觉得server A 很不错，我要选定server A提供给我的动态IP地址&lt;br&gt;
(ACK) server A -&amp;gt; client 单播 这里是你的动态IP地址！你的地址是xxx，子网掩码是xxx，dns服务器是xxx，以及其他有用的信息&lt;/p&gt;</description></item><item><title>使用karabiner实现vim的中英文输入法丝滑切换</title><link>https://binc4t.github.io/posts/vim-switch-cn-en/</link><pubDate>Sat, 24 Feb 2024 17:56:47 +0800</pubDate><guid>https://binc4t.github.io/posts/vim-switch-cn-en/</guid><description>&lt;p&gt;#vim&lt;/p&gt;
&lt;h2 id="背景"&gt;
 背景
 &lt;a class="heading-link" href="#%e8%83%8c%e6%99%af"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;vim从编辑模式退出到普通模式下的时候，需要手动切换到英文输入法，其他编辑器的vim模式同样存在此问题，我想在vim退出编辑模式时自动切换为英文输入法&lt;/p&gt;
&lt;p&gt;实现这个功能有两个思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim插件&lt;/li&gt;
&lt;li&gt;修改键盘映射
vim插件的办法这里不做介绍，因为vim插件无法在其他编辑器的vim模式下使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里采用&lt;a href="https://karabiner-elements.pqrs.org/" class="external-link" target="_blank" rel="noopener"&gt;karabiner&lt;/a&gt;修改键位映射来实现，karabiner是一个很方便的键位修改软件，我一直在使用，解决此问题的思路是：修改ESC的键盘映射，实现在按下ESC的同时，修改输入法为英文&lt;/p&gt;
&lt;h2 id="如何实现"&gt;
 如何实现
 &lt;a class="heading-link" href="#%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;karabiner 允许用户通过json的形式自定义键位映射，点击下面红框部分，可以通过一段json来自定义键位的行为
&lt;img src="https://pic-1258720617.cos.ap-beijing.myqcloud.com/20240224174646.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;下面是实现该功能的json配置，其含义是：
在当前输入法不是英文的前提下，按下ESC时，会先按下ESC，同时把输入法切换为英文&lt;/p&gt;
&lt;p&gt;这段json的语法是karabiner的json配置语法，可以在karabiner官网找到详细的&lt;a href="https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition" class="external-link" target="_blank" rel="noopener"&gt;karabiner json语法介绍&lt;/a&gt;，语法还是比较直观的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;ESC: ESC and language to en&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;manipulators&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;basic&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;conditions&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;input_source_unless&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;input_sources&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;input_source_id&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;^com\\.apple\\.keylayout\\.ABC$&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;^en$&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;key_code&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;escape&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;key_code&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;escape&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;select_input_source&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#1f2328"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;input_source_id&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;^com\\.apple\\.keylayout\\.ABC$&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#0550ae"&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#34;^en$&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#1f2328"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在karabiner启用这段json配置之后，就可以体验丝滑的vim中英文切换了！&lt;/p&gt;</description></item><item><title>dnsmasq 使用备忘</title><link>https://binc4t.github.io/posts/dnsmasq/</link><pubDate>Fri, 12 Jan 2024 23:04:41 +0800</pubDate><guid>https://binc4t.github.io/posts/dnsmasq/</guid><description>&lt;p&gt;最近在给手机测试时，想要把手机上对特定域名的请求劫持到Mac上来，就需要用到dnsmasq，把Mac变成一个dns服务器，然后手机的dns服务器地址修改到mac上来。下面做一个配置备忘&lt;/p&gt;
&lt;p&gt;参考：https://blog.niekun.net/archives/1869.html&lt;/p&gt;
&lt;p&gt;省略安装步骤，debian用 &lt;code&gt;apt install&lt;/code&gt;，mac用 &lt;code&gt;brew install&lt;/code&gt; 即可，下面进行配置&lt;/p&gt;
&lt;p&gt;dnsmasq会按照一定的顺序去进行域名解析&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;首先是系统以及自定义的hosts文件： /etc/hosts /etc/hosts.dnsmasq
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;然后是上游dns server，定义在：resolv.dnsmasq.conf 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认dns server记录在&lt;code&gt;/etc/resolv.conf&lt;/code&gt;文件中，既然我们要使用dnsmasq来做dns服务器，那么就应该让dnsmasq能够查询系统原本的dns sever，等于是用dnsmasq做了一个中继&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp /etc/resolv.conf /etc/resolv.dnsmasq.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在/etc/resolv.conf文件中，将内容改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nameserver 127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就把本机的dns server指向了 127.0.0.1，这时候机器的dns请求就会发往127.0.0.1的53端口，dns默认监听端口，也是dnsmasq的监听端口&lt;/p&gt;
&lt;p&gt;这里注意，在mac上需要在设置-网络-DNS中修改DNS服务器·&lt;/p&gt;
&lt;p&gt;然后再在 &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt; 文件中输入配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 监听地址：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 如果只写 127.0.0.1 则只处理本机的 DNS 解析，不写这句默认监听所有网口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# listen-address=127.0.0.1,192.168.8.132&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 指定自定义 hosts 文件：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;addn-hosts&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;/etc/hosts.dnsmasq
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 指定上游 DNS 服务列表的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;resolv-file&lt;span style="color:#0550ae"&gt;=&lt;/span&gt;/etc/resolv.dnsmasq.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 按照 DNS 列表一个个查询，不重新排列 DNS server 的顺序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strict-order
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# 表示对下面设置的所有 server 发起查询请求，选择响应最快的服务器的结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;all-servers
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样配置过程就完成了！&lt;/p&gt;</description></item><item><title>2023 阅读记录</title><link>https://binc4t.github.io/posts/reading_2023/</link><pubDate>Sun, 31 Dec 2023 10:06:39 +0800</pubDate><guid>https://binc4t.github.io/posts/reading_2023/</guid><description>&lt;h1 id="2023-读书记录"&gt;
 2023 读书记录
 &lt;a class="heading-link" href="#2023-%e8%af%bb%e4%b9%a6%e8%ae%b0%e5%bd%95"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="在读"&gt;
 在读
 &lt;a class="heading-link" href="#%e5%9c%a8%e8%af%bb"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/25900403/" class="external-link" target="_blank" rel="noopener"&gt;Unix环境高级编程&lt;/a&gt; APUE 经典名著&amp;hellip; &lt;br&gt;
15章 进程间通信 1，2，3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/30348061/" class="external-link" target="_blank" rel="noopener"&gt;自己动手实现Lua&lt;/a&gt; 23% 哪个程序员能拒绝自己实现一台虚拟机呢&lt;/p&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/10797189/" class="external-link" target="_blank" rel="noopener"&gt;编写可读代码的艺术&lt;/a&gt; 30% 短小精悍&lt;/p&gt;
&lt;h2 id="在刷"&gt;
 在刷
 &lt;a class="heading-link" href="#%e5%9c%a8%e5%88%b7"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;MIT 6.824 分布式系统课程 &lt;a href="http://nil.csail.mit.edu/6.824/2022/schedule.html" class="external-link" target="_blank" rel="noopener"&gt;课件&lt;/a&gt; &lt;a href="https://www.bilibili.com/video/BV1CU4y1P7PE/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=a81ed9570e0a579c831aa7813da34f43" class="external-link" target="_blank" rel="noopener"&gt;视频&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1章 Introduction&lt;/li&gt;
&lt;li&gt;2章 RPC and Threads&lt;/li&gt;
&lt;li&gt;3章 GFS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="读完"&gt;
 读完
 &lt;a class="heading-link" href="#%e8%af%bb%e5%ae%8c"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/27120520/" class="external-link" target="_blank" rel="noopener"&gt;Head First JavaScript程序设计&lt;/a&gt; 娓娓道来，培养兴趣，入门好书&lt;/p&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/35236126/" class="external-link" target="_blank" rel="noopener"&gt;那些想红的年轻人&lt;/a&gt; 介绍自媒体商业模式和自媒体从业者心路历程的好书，作者很真诚，值得一看&lt;/p&gt;</description></item><item><title>Go by Example</title><link>https://binc4t.github.io/posts/go-by-example/</link><pubDate>Sun, 10 Dec 2023 13:36:32 +0800</pubDate><guid>https://binc4t.github.io/posts/go-by-example/</guid><description>&lt;h1 id="重归基础"&gt;
 重归基础
 &lt;a class="heading-link" href="#%e9%87%8d%e5%bd%92%e5%9f%ba%e7%a1%80"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;通过例子来学习Go&lt;br&gt;
英文版本：https://gobyexample.com/&lt;br&gt;
中文版本：https://gobyexample-cn.github.io/&lt;/p&gt;
&lt;h1 id="笔记"&gt;
 笔记
 &lt;a class="heading-link" href="#%e7%ac%94%e8%ae%b0"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="迭代和递归"&gt;
 迭代和递归
 &lt;a class="heading-link" href="#%e8%bf%ad%e4%bb%a3%e5%92%8c%e9%80%92%e5%bd%92"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;重新感受一下斐波那契数列的递归和迭代算法性能差距&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;// feb.go&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;func&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebRecursive&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;==&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#cf222e"&gt;return&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;==&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#cf222e"&gt;return&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;return&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebRecursive&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;+&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebRecursive&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;&lt;span style="color:#0550ae"&gt;2&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;func&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebIterative&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;==&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#cf222e"&gt;return&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;a&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;:=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;for&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;:=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;n&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#0550ae"&gt;++&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;a&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;+&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#1f2328"&gt;a&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;a&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;return&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#57606a"&gt;// feb_test.go&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;func&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;Benchmark_FebIterative&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;*&lt;/span&gt;&lt;span style="color:#1f2328"&gt;testing&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;B&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;for&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;:=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;N&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#0550ae"&gt;++&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebIterative&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;30&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#cf222e"&gt;func&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;Benchmark_FebRecursive&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;*&lt;/span&gt;&lt;span style="color:#1f2328"&gt;testing&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;B&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#cf222e"&gt;for&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;:=&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;b&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;N&lt;/span&gt;&lt;span style="color:#1f2328"&gt;;&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;i&lt;/span&gt;&lt;span style="color:#0550ae"&gt;++&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;		&lt;/span&gt;&lt;span style="color:#6639ba"&gt;FebRecursive&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;30&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="字符串和rune"&gt;
 字符串和rune
 &lt;a class="heading-link" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%92%8crune"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;调用 len 得到字节长度
for range 是按照rune来遍历&lt;/p&gt;</description></item><item><title>学习 sentinel-golang 的滑动窗口实现</title><link>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</link><pubDate>Sun, 03 Sep 2023 10:06:39 +0800</pubDate><guid>https://binc4t.github.io/posts/sentinel-golang_slidingwindow/</guid><description>&lt;h2 id="前言"&gt;
 前言
 &lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;最近工作中需要用到限频的功能，限制同IP在一定时间内的访问量，又因为想做成统计周期可配置，所以令牌桶不太适用，需要用滑动窗口来实现，发现了一个专门做流量访问控制的阿里的开源项目&lt;a href="link:https://github.com/alibaba/sentinel-golang" &gt;&lt;strong&gt;sentinel&lt;/strong&gt;&lt;/a&gt;，奈何自己太菜了，直接引用了其中的滑动窗口的实现，不过还是学习了人家的写法并记录在这里&lt;/p&gt;
&lt;h2 id="滑动窗口的基本属性"&gt;
 滑动窗口的基本属性
 &lt;a class="heading-link" href="#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;滑动窗口有两个最基本的属性，长度以及分桶数；长度决定了这个窗口有多长，也就是统计周期；分桶数决定了这个窗口的统计颗粒度。&lt;/p&gt;
&lt;p&gt;那么滑动窗口该怎么实现呢？&lt;/p&gt;
&lt;p&gt;滑动窗口不断向前滚动，采用新的数据，抛弃旧的数据，就很容易让人联想到环形数组。都是不断淘汰旧的数据，每次关心的只有这个环的大小，更新的和更旧的数据都不关心。&lt;/p&gt;
&lt;p&gt;一起看一下sentinel-golang中的滑动窗口实现吧&lt;/p&gt;
&lt;h2 id="sentinel-golang的滑动窗口实现"&gt;
 sentinel-golang的滑动窗口实现
 &lt;a class="heading-link" href="#sentinel-golang%e7%9a%84%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e5%ae%9e%e7%8e%b0"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id="定义一个桶"&gt;
 定义一个桶
 &lt;a class="heading-link" href="#%e5%ae%9a%e4%b9%89%e4%b8%80%e4%b8%aa%e6%a1%b6"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;首先定义一个桶，最简单的桶就是一个counter，下面的&lt;code&gt;MetricBucket&lt;/code&gt;就定义了一个桶，这里的counter是二维统计，可以将Pass, Reject, Total等维度分别统计，下面的&lt;code&gt;minRT&lt;/code&gt;和&lt;code&gt;maxConcurrency&lt;/code&gt;可以暂时不用关心， 可以看出一个桶本质上就是一个counter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;type&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;MetricBucket&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;struct&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#57606a"&gt;// Value of statistic&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;counter&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;[&lt;/span&gt;&lt;span style="color:#1f2328"&gt;base&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;MetricEventTotal&lt;/span&gt;&lt;span style="color:#1f2328"&gt;]&lt;/span&gt;&lt;span style="color:#cf222e"&gt;int64&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;minRt&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int64&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;maxConcurrency&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int32&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过面的函数可以对counter值做加法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;func&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;mb&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#0550ae"&gt;*&lt;/span&gt;&lt;span style="color:#1f2328"&gt;MetricBucket&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#6639ba"&gt;addCount&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#1f2328"&gt;event&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;base&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;MetricEvent&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;count&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#cf222e"&gt;int64&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;{&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;	&lt;/span&gt;&lt;span style="color:#1f2328"&gt;atomic&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#6639ba"&gt;AddInt64&lt;/span&gt;&lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;mb&lt;/span&gt;&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;&lt;span style="color:#1f2328"&gt;counter&lt;/span&gt;&lt;span style="color:#1f2328"&gt;[&lt;/span&gt;&lt;span style="color:#1f2328"&gt;event&lt;/span&gt;&lt;span style="color:#1f2328"&gt;],&lt;/span&gt;&lt;span style="color:#fff"&gt; &lt;/span&gt;&lt;span style="color:#1f2328"&gt;count&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fff"&gt;&lt;/span&gt;&lt;span style="color:#1f2328"&gt;}&lt;/span&gt;&lt;span style="color:#fff"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的桶放之四海皆可，但是如果想成为个滑动窗口用桶，只有counter是不够的，因为滑动窗口中的每一个桶还有时间的概念，BucketWrap是对桶的封装，添加了开始时间&lt;code&gt;BucketStart&lt;/code&gt;，Value中存放的是一个&lt;code&gt;*MetricBucket&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Tendermint笔记</title><link>https://binc4t.github.io/posts/tendermint/</link><pubDate>Fri, 15 Apr 2022 00:41:31 +0800</pubDate><guid>https://binc4t.github.io/posts/tendermint/</guid><description>&lt;h1 id="参考资料"&gt;
 参考资料
 &lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.notion.so/Tendermint-Core-3be8256293ae4c36810d2155477bf34c#d931765e36f7423f877333244aa81d0c" class="external-link" target="_blank" rel="noopener"&gt;什么是Tendermint&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="什么是tendermint"&gt;
 什么是Tendermint
 &lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%aftendermint"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Tendermint 是一种区块链的构建工具，或者区块链的开发框架，能够帮助开发者快速构建一条区块链。它主要包含两个部分：Tendermint Core 以及 ABCI(Application Blockchain Interface)，前者通过BFT实现了一种共识协议以及P2P网络通信，后者则定义了搭建在 Tendermint Core 之上的应用层接口。&lt;/p&gt;
&lt;p&gt;Tendermint Core 将区块链共识协议层和对等网络通信层实现，使得开发者能够不用过分关心复杂的底层实现，而专注于应用层开发。借用&lt;a href="https://www.youtube.com/watch?v=V0JdeRzVndI&amp;amp;t=113s" class="external-link" target="_blank" rel="noopener"&gt;Dan Boneh&lt;/a&gt;提到的区块链网络分层模型，我认为Tendermint Core实现了下两层的内容，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yyypics.oss-cn-beijing.aliyuncs.com/Untitled-2022-04-16-2352.svg" alt="区块链网络分层模型"&gt;&lt;/p&gt;</description></item><item><title>pbft笔记</title><link>https://binc4t.github.io/posts/pbft/</link><pubDate>Tue, 12 Apr 2022 23:36:57 +0800</pubDate><guid>https://binc4t.github.io/posts/pbft/</guid><description>&lt;h1 id="参考资料"&gt;
 参考资料
 &lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pmg.csail.mit.edu/papers/osdi99.pdf" class="external-link" target="_blank" rel="noopener"&gt;PBFT 论文&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/consensus/pbft.html" class="external-link" target="_blank" rel="noopener"&gt;FISCO-BCOS的PBFT介绍&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Uj638eFIWg8" class="external-link" target="_blank" rel="noopener"&gt;Liskov对PBFT的讲解&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.tendermint.com/master/introduction/what-is-tendermint.html" class="external-link" target="_blank" rel="noopener"&gt;What is Tendermint&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="论文笔记"&gt;
 论文笔记
 &lt;a class="heading-link" href="#%e8%ae%ba%e6%96%87%e7%ac%94%e8%ae%b0"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="一些记录"&gt;
 一些记录
 &lt;a class="heading-link" href="#%e4%b8%80%e4%ba%9b%e8%ae%b0%e5%bd%95"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;3f+1&lt;/code&gt; is the minimum number of replicas that allow an asynchronous system to provide the safety and liveness properties when up to &lt;code&gt;f&lt;/code&gt; replicas are faulty&lt;/p&gt;
&lt;p&gt;在一个由&lt;code&gt;3f+1&lt;/code&gt;个节点构成的系统中，最多有&lt;code&gt;f&lt;/code&gt;个恶意节点，才能保证系统的safty和liveness&lt;/p&gt;
&lt;p&gt;This many replicas are needed because it must be possible to proceed after communicating with &lt;code&gt;n-f&lt;/code&gt; replicas, since &lt;code&gt;f&lt;/code&gt; replicas might be faulty and not responding. However, it is possible that the &lt;code&gt;f&lt;/code&gt; replicas that did not respond are not faulty and, therefore, &lt;code&gt;f&lt;/code&gt; of those that responded might be faulty. Even so, there must still be enough responses that those from non-faulty replicas outnumber those from faulty ones, i.e., &lt;code&gt;n-2f&lt;/code&gt;. Therefore &lt;code&gt;n &amp;gt; 3f&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>刷题记录</title><link>https://binc4t.github.io/posts/rp-diary/</link><pubDate>Sat, 02 Apr 2022 00:15:03 +0800</pubDate><guid>https://binc4t.github.io/posts/rp-diary/</guid><description>&lt;h1 id="刷题统计"&gt;
 刷题统计
 &lt;a class="heading-link" href="#%e5%88%b7%e9%a2%98%e7%bb%9f%e8%ae%a1"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;h1 id="41"&gt;
 4.1
 &lt;a class="heading-link" href="#41"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;二分搜索&lt;/strong&gt;&lt;br&gt;
704. Binary Search&lt;br&gt;
278. First Bad Version&lt;br&gt;
35. Search Insert Position&lt;/p&gt;
&lt;h1 id="42"&gt;
 4.2
 &lt;a class="heading-link" href="#42"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;双指针&amp;amp;矩阵搜索&lt;/strong&gt;&lt;br&gt;
#3 无重复字符的最长子串&lt;br&gt;
#19 删除链表的倒数第 N 个结点&lt;br&gt;
#876 链表的中间结点 &lt;br&gt;
#557 反转字符串中的单词 III &lt;br&gt;
#240 搜索二维矩阵 II&lt;br&gt;
#344 反转字符串 &lt;br&gt;
#11 盛最多水的容器&lt;br&gt;
#167 两数之和 II - 输入有序数组&lt;br&gt;
#283 移动零 &lt;br&gt;
#189 轮转数组&lt;br&gt;
#977 有序数组的平方&lt;/p&gt;
&lt;h1 id="43"&gt;
 4.3
 &lt;a class="heading-link" href="#43"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;&lt;br&gt;
#567 字符串的排列&lt;br&gt;
#3 无重复字符的最长子串&lt;br&gt;
#567 字符串的排列&lt;br&gt;
&lt;strong&gt;栈和队列&lt;/strong&gt; &lt;br&gt;
#232 用栈实现队列&lt;br&gt;
#20 有效的括号&lt;br&gt;
&lt;strong&gt;链表&lt;/strong&gt;&lt;br&gt;
#206 反转链表&lt;/p&gt;</description></item></channel></rss>